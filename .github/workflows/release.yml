name: Build and Release Rust Canister

on:
  push:
    branches:
      - main
    paths:
      - "Cargo.toml"
      - "src/**"
      - "dfx.json"

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version-changed: ${{ steps.check.outputs.changed }}
      new-version: ${{ steps.check.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check if version changed
        id: check
        run: |
          # Get current version from Cargo.toml
          CURRENT_VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          echo "Current version: $CURRENT_VERSION"

          # Get previous version from the last commit
          git checkout HEAD~1 -- Cargo.toml 2>/dev/null || echo "No previous Cargo.toml found"
          PREVIOUS_VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/' 2>/dev/null || echo "0.0.0")
          echo "Previous version: $PREVIOUS_VERSION"

          # Restore current Cargo.toml
          git checkout HEAD -- Cargo.toml

          # Check if version changed
          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
            echo "Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          else
            echo "Version unchanged"
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          fi

  build-and-release:
    needs: check-version
    if: needs.check-version.outputs.version-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      - name: Install dfx
        uses: dfinity/setup-dfx@main
        with:
          dfx-version: "0.15.1"

      - name: Install didc (Candid compiler)
        run: |
          # Install didc for Candid interface extraction
          cargo install didc --version 0.3.6 || echo "didc install failed, will rely on dfx build"

      - name: Confirm dfx installation
        run: dfx --version

      - name: Cache Cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Generate Cargo.lock if missing
        run: |
          if [ ! -f "Cargo.lock" ]; then
            echo "Generating Cargo.lock file..."
            cargo generate-lockfile
          else
            echo "Cargo.lock already exists"
          fi

          # Ensure dependencies are up to date
          cargo update

      - name: Generate Candid interface
        run: |
          echo "Generating Candid interface..."
          # First build the WASM canister to generate the DID file
          dfx start --background --clean
          sleep 5
          dfx canister create --all

          # Build without --locked flag to allow lock file generation
          RUST_LOG=info dfx build blueband_rust || {
            echo "Build failed, trying with cargo directly..."
            cargo build --target wasm32-unknown-unknown --release -p blueband_rust
            # Manual build completion steps if needed
          }

          # Extract the DID file from the build
          if [ -f ".dfx/local/canisters/blueband_rust/blueband_rust.did" ]; then
            cp .dfx/local/canisters/blueband_rust/blueband_rust.did ./blueband_rust.did
            echo "Generated Candid interface from dfx build:"
            cat blueband_rust.did
          else
            echo "Warning: DID file not found from dfx build, trying alternative method..."
            # Alternative: Use didc to extract from WASM if available
            if command -v didc &> /dev/null && [ -f ".dfx/local/canisters/blueband_rust/blueband_rust.wasm" ]; then
              didc bind .dfx/local/canisters/blueband_rust/blueband_rust.wasm > blueband_rust.did
              echo "Generated Candid interface using didc:"
              cat blueband_rust.did
            else
              echo "Error: Cannot generate Candid interface"
              exit 1
            fi
          fi

      - name: Validate Candid interface
        run: |
          # Check if the DID file was generated and is not empty
          if [ ! -s blueband_rust.did ]; then
            echo "Error: Candid interface file is empty or not generated"
            exit 1
          fi

          # Basic validation - check if it contains service definition
          if ! grep -q "service" blueband_rust.did; then
            echo "Warning: Candid file might be incomplete - no service definition found"
          fi

      - name: Create and build canister
        run: |
          echo "Canister already built during Candid generation"
          echo "Verifying build artifacts..."

      - name: Verify build artifacts
        run: |
          echo "Checking build artifacts..."
          ls -la .dfx/local/canisters/blueband_rust/

          # Verify WASM file exists and has reasonable size
          WASM_FILE=".dfx/local/canisters/blueband_rust/blueband_rust.wasm"
          if [ ! -f "$WASM_FILE" ]; then
            echo "Error: WASM file not found"
            exit 1
          fi

          WASM_SIZE=$(stat -f%z "$WASM_FILE" 2>/dev/null || stat -c%s "$WASM_FILE")
          echo "WASM file size: $WASM_SIZE bytes"

          if [ "$WASM_SIZE" -lt 1000 ]; then
            echo "Error: WASM file seems too small"
            exit 1
          fi

      - name: Prepare release artifacts
        run: |
          # Copy and compress WASM file
          cp .dfx/local/canisters/blueband_rust/blueband_rust.wasm ./blueband_rust.wasm
          gzip -c ./blueband_rust.wasm > ./blueband_rust.wasm.gz

          # Ensure DID file is in root (should already be there from generation step)
          if [ ! -f "./blueband_rust.did" ]; then
            echo "Error: DID file not found in root directory"
            exit 1
          fi

          echo "Release artifacts prepared:"
          ls -la blueband_rust.wasm*
          ls -la blueband_rust.did

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.check-version.outputs.new-version }}
          release_name: Blueband Vector Database v${{ needs.check-version.outputs.new-version }}
          body: |
            ## Blueband Vector Database v${{ needs.check-version.outputs.new-version }}

            ### ðŸš€ Features
            - Production-ready vector database canister built in Rust
            - Advanced similarity search with hierarchical indexing
            - OpenAI embedding model support (Ada-002, 3-small, 3-large)
            - Semantic document chunking and vector storage
            - Collection-based organization with admin controls
            - Optimized performance with LRU caching

            ### ðŸ“¦ Release Artifacts
            - `blueband_rust.wasm.gz` - Compressed WebAssembly canister
            - `blueband_rust.did` - Candid interface definition

            ### ðŸ”§ Installation
            ```bash
            # Download and deploy
            wget https://github.com/${{ github.repository }}/releases/download/v${{ needs.check-version.outputs.new-version }}/blueband_rust.wasm.gz
            gunzip blueband_rust.wasm.gz
            dfx canister install --mode install --wasm blueband_rust.wasm <canister-id>
            ```

            Built from commit: ${{ github.sha }}
          draft: false
          prerelease: false

      - name: Upload compressed WASM
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./blueband_rust.wasm.gz
          asset_name: blueband_rust.wasm.gz
          asset_content_type: application/gzip

      - name: Upload uncompressed WASM
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./blueband_rust.wasm
          asset_name: blueband_rust.wasm
          asset_content_type: application/wasm

      - name: Upload Candid interface
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./blueband_rust.did
          asset_name: blueband_rust.did
          asset_content_type: text/plain

      - name: Stop dfx
        if: always()
        run: dfx stop
