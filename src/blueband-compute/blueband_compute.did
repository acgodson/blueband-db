type Vector = record {
    id : text;
    document_id : text;
    chunk_id : text;
    embedding : vec float32;
};

type MetadataFilter = record {
    document_ids : opt vec text;
    chunk_ids : opt vec text;
    limit : opt nat64;
};

type ScoredMatch = record {
    score : float64;
    document_id : text;
    chunk_id : text;
};

type QueryResult = record {
    matches : vec ScoredMatch;
};

type ScaledEmbedding = record {
    values : vec vec nat64;
    norms : vec nat64;
};

type FloatEmbedding = record {
    embeddings : vec vec float64;
    norm_values : vec float64;
};

type EmbeddingResult = variant {
    Scaled : ScaledEmbedding;
    Float : FloatEmbedding;
};

type CacheStats = record {
    cache_size : nat64;
    hits : nat64;
    misses : nat64;
    memory_usage : nat64;
};

service : {
    query_text : (text, text, opt MetadataFilter) -> (variant { Ok : QueryResult; Err : text });
    generate_embeddings : (vec text, text, bool) -> (variant { Ok : EmbeddingResult; Err : text });
    invalidate_cache : (text) -> ();
    get_cache_stats : () -> (CacheStats) query;
};
